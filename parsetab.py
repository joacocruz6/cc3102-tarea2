
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEASSIGN DIVIDE DO ELSE EQUALS GREATER GREATEREQ IF INT LEFTBRACKET LOWER LOWEREQ MINUS MULTIPLY NAME NEXTINST NOTEQ PLUS PRINT READ RIGHTBRACKET THEN WHILE WLEFTBRACKET WRIGHTBRACKET\n    empty :\n    \n    program : program program\n    \n    program : conditional\n            | loop\n            | variables NEXTINST\n            | input NEXTINST\n            | show NEXTINST\n    \n    variables : NAME ASSIGN  expression\n    \n    conditional : IF LEFTBRACKET expression RIGHTBRACKET THEN WLEFTBRACKET program WRIGHTBRACKET\n    \n    conditional : IF LEFTBRACKET expression RIGHTBRACKET THEN WLEFTBRACKET program WRIGHTBRACKET ELSE WLEFTBRACKET program WRIGHTBRACKET\n    \n    loop : WHILE LEFTBRACKET expression RIGHTBRACKET DO WLEFTBRACKET program WRIGHTBRACKET\n    \n    show : PRINT LEFTBRACKET expression RIGHTBRACKET\n    \n    input :  NAME EQUALS READ LEFTBRACKET RIGHTBRACKET\n    \n    expression : INT\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EQUALS expression\n               | expression LOWER expression\n               | expression GREATER expression\n               | expression NOTEQ expression\n               | expression LOWEREQ expression\n               | expression GREATEREQ expression\n    \n    expression : LEFTBRACKET expression RIGHTBRACKET\n    \n    expression : MINUS expression\n    \n    expression : NAME\n    '
    
_lr_action_items = {'$end':([0,1,],[-1,0,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'empty':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> empty","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','main.py',114),
  ('program -> program program','program',2,'p_program_finite','main.py',120),
  ('program -> conditional','program',1,'p_program_infinite','main.py',127),
  ('program -> loop','program',1,'p_program_infinite','main.py',128),
  ('program -> variables NEXTINST','program',2,'p_program_infinite','main.py',129),
  ('program -> input NEXTINST','program',2,'p_program_infinite','main.py',130),
  ('program -> show NEXTINST','program',2,'p_program_infinite','main.py',131),
  ('variables -> NAME ASSIGN expression','variables',3,'p_variables','main.py',137),
  ('conditional -> IF LEFTBRACKET expression RIGHTBRACKET THEN WLEFTBRACKET program WRIGHTBRACKET','conditional',8,'p_conditional','main.py',144),
  ('conditional -> IF LEFTBRACKET expression RIGHTBRACKET THEN WLEFTBRACKET program WRIGHTBRACKET ELSE WLEFTBRACKET program WRIGHTBRACKET','conditional',12,'p_conditional_else','main.py',149),
  ('loop -> WHILE LEFTBRACKET expression RIGHTBRACKET DO WLEFTBRACKET program WRIGHTBRACKET','loop',8,'p_loop','main.py',154),
  ('show -> PRINT LEFTBRACKET expression RIGHTBRACKET','show',4,'p_show','main.py',160),
  ('input -> NAME EQUALS READ LEFTBRACKET RIGHTBRACKET','input',5,'p_input','main.py',165),
  ('expression -> INT','expression',1,'p_expression_number','main.py',172),
  ('expression -> expression PLUS expression','expression',3,'p_expression_arithmetic','main.py',177),
  ('expression -> expression MINUS expression','expression',3,'p_expression_arithmetic','main.py',178),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_arithmetic','main.py',179),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_arithmetic','main.py',180),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_arithmetic','main.py',181),
  ('expression -> expression LOWER expression','expression',3,'p_expression_arithmetic','main.py',182),
  ('expression -> expression GREATER expression','expression',3,'p_expression_arithmetic','main.py',183),
  ('expression -> expression NOTEQ expression','expression',3,'p_expression_arithmetic','main.py',184),
  ('expression -> expression LOWEREQ expression','expression',3,'p_expression_arithmetic','main.py',185),
  ('expression -> expression GREATEREQ expression','expression',3,'p_expression_arithmetic','main.py',186),
  ('expression -> LEFTBRACKET expression RIGHTBRACKET','expression',3,'p_expression_parenthesis','main.py',192),
  ('expression -> MINUS expression','expression',2,'p_expression_minus','main.py',197),
  ('expression -> NAME','expression',1,'p_expression_var','main.py',202),
]
