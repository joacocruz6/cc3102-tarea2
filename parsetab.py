
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftMULTIPLYDIVIDEASSIGN DIVIDE DO ELSE EQUALS GREATER GREATEREQ IF INT LEFTBRACKET LOWER LOWEREQ MINUS MULTIPLY NAME NEXTINST NOTEQ PLUS PRINT READ RIGHTBRACKET THEN WHILE WLEFTBRACKET WRIGHTBRACKET\n    empty :\n    \n    conditional : IF expression THEN instruction\n    \n    conditional : IF expression THEN instruction ELSE instruction\n    \n    loop : WHILE expression DO instruction\n    \n    assignment : NAME ASSIGN expression\n    \n    show : PRINT LEFTBRACKET expression RIGHTBRACKET\n    \n    input : NAME ASSIGN READ\n    \n    instruction : conditional\n                | loop\n                | assignment NEXTINST\n                | show NEXTINST\n                | input NEXTINST\n    \n    instruction : WLEFTBRACKET instruction WRIGHTBRACKET\n                | WLEFTBRACKET code WRIGHTBRACKET\n    \n    expression : INT\n    \n    expression : NAME\n    \n    expression : LEFTBRACKET expression RIGHTBRACKET\n    \n    expression : MINUS expression\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression EQUALS expression\n               | expression LOWER expression\n               | expression GREATER expression\n               | expression NOTEQ expression\n               | expression LOWEREQ expression\n               | expression GREATEREQ expression\n    \n    code : instruction instruction\n         | code instruction\n         | instruction code\n         | code code\n    \n    program : code\n            | instruction\n    '
    
_lr_action_items = {'WLEFTBRACKET':([0,2,3,4,5,9,14,15,16,17,18,19,20,21,22,31,32,33,46,50,62,64,65,],[9,9,9,-8,-9,9,9,9,9,9,-10,-11,-12,9,9,-13,-14,9,9,-2,-4,9,-3,]),'IF':([0,2,3,4,5,9,14,15,16,17,18,19,20,21,22,31,32,33,46,50,62,64,65,],[10,10,10,-8,-9,10,10,10,10,10,-10,-11,-12,10,10,-13,-14,10,10,-2,-4,10,-3,]),'WHILE':([0,2,3,4,5,9,14,15,16,17,18,19,20,21,22,31,32,33,46,50,62,64,65,],[11,11,11,-8,-9,11,11,11,11,11,-10,-11,-12,11,11,-13,-14,11,11,-2,-4,11,-3,]),'NAME':([0,2,3,4,5,9,10,11,14,15,16,17,18,19,20,21,22,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,50,62,64,65,],[12,12,12,-8,-9,12,25,25,12,12,12,12,-10,-11,-12,12,12,25,25,25,25,-13,-14,12,25,25,25,25,25,25,25,25,25,25,12,-2,-4,12,-3,]),'PRINT':([0,2,3,4,5,9,14,15,16,17,18,19,20,21,22,31,32,33,46,50,62,64,65,],[13,13,13,-8,-9,13,13,13,13,13,-10,-11,-12,13,13,-13,-14,13,13,-2,-4,13,-3,]),'$end':([1,2,3,4,5,14,15,16,17,18,19,20,31,32,50,62,65,],[0,-33,-34,-8,-9,-32,-30,-29,-31,-10,-11,-12,-13,-14,-2,-4,-3,]),'WRIGHTBRACKET':([4,5,14,15,16,17,18,19,20,21,22,31,32,50,62,65,],[-8,-9,-32,-30,-29,-31,-10,-11,-12,31,32,-13,-14,-2,-4,-3,]),'ELSE':([4,5,18,19,20,31,32,50,62,65,],[-8,-9,-10,-11,-12,-13,-14,64,-4,-3,]),'NEXTINST':([6,7,8,24,25,45,47,48,51,52,53,54,55,56,57,58,59,60,61,63,],[18,19,20,-15,-16,-18,-5,-7,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-17,-6,]),'INT':([10,11,26,27,29,30,34,35,36,37,38,39,40,41,42,43,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'LEFTBRACKET':([10,11,13,26,27,29,30,34,35,36,37,38,39,40,41,42,43,],[26,26,30,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'MINUS':([10,11,23,24,25,26,27,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[27,27,35,-15,-16,27,27,35,27,27,27,27,27,27,27,27,27,27,27,27,35,-18,35,35,-19,-20,-21,-22,35,35,35,35,35,35,-17,]),'ASSIGN':([12,],[29,]),'THEN':([23,24,25,45,51,52,53,54,55,56,57,58,59,60,61,],[33,-15,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-17,]),'PLUS':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[34,-15,-16,34,34,-18,34,34,-19,-20,-21,-22,34,34,34,34,34,34,-17,]),'MULTIPLY':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[36,-15,-16,36,36,36,36,36,36,36,-21,-22,36,36,36,36,36,36,-17,]),'DIVIDE':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[37,-15,-16,37,37,37,37,37,37,37,-21,-22,37,37,37,37,37,37,-17,]),'EQUALS':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[38,-15,-16,38,38,-18,38,38,-19,-20,-21,-22,38,38,38,38,38,38,-17,]),'LOWER':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[39,-15,-16,39,39,-18,39,39,-19,-20,-21,-22,39,39,39,39,39,39,-17,]),'GREATER':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[40,-15,-16,40,40,-18,40,40,-19,-20,-21,-22,40,40,40,40,40,40,-17,]),'NOTEQ':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[41,-15,-16,41,41,-18,41,41,-19,-20,-21,-22,41,41,41,41,41,41,-17,]),'LOWEREQ':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[42,-15,-16,42,42,-18,42,42,-19,-20,-21,-22,42,42,42,42,42,42,-17,]),'GREATEREQ':([23,24,25,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,],[43,-15,-16,43,43,-18,43,43,-19,-20,-21,-22,43,43,43,43,43,43,-17,]),'DO':([24,25,28,45,51,52,53,54,55,56,57,58,59,60,61,],[-15,-16,46,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-17,]),'RIGHTBRACKET':([24,25,44,45,49,51,52,53,54,55,56,57,58,59,60,61,],[-15,-16,61,-18,63,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-17,]),'READ':([29,],[48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'code':([0,2,3,9,14,15,16,17,21,22,],[2,14,17,22,14,17,17,14,17,14,]),'instruction':([0,2,3,9,14,15,16,17,21,22,33,46,64,],[3,15,16,21,15,16,16,15,16,15,50,62,65,]),'conditional':([0,2,3,9,14,15,16,17,21,22,33,46,64,],[4,4,4,4,4,4,4,4,4,4,4,4,4,]),'loop':([0,2,3,9,14,15,16,17,21,22,33,46,64,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,3,9,14,15,16,17,21,22,33,46,64,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'show':([0,2,3,9,14,15,16,17,21,22,33,46,64,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'input':([0,2,3,9,14,15,16,17,21,22,33,46,64,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'expression':([10,11,26,27,29,30,34,35,36,37,38,39,40,41,42,43,],[23,28,44,45,47,49,51,52,53,54,55,56,57,58,59,60,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','program.py',175),
  ('conditional -> IF expression THEN instruction','conditional',4,'p_conditional','program.py',183),
  ('conditional -> IF expression THEN instruction ELSE instruction','conditional',6,'p_conditional_else','program.py',191),
  ('loop -> WHILE expression DO instruction','loop',4,'p_loop','program.py',199),
  ('assignment -> NAME ASSIGN expression','assignment',3,'p_assignment','program.py',207),
  ('show -> PRINT LEFTBRACKET expression RIGHTBRACKET','show',4,'p_show','program.py',215),
  ('input -> NAME ASSIGN READ','input',3,'p_input','program.py',223),
  ('instruction -> conditional','instruction',1,'p_program_finite','program.py',231),
  ('instruction -> loop','instruction',1,'p_program_finite','program.py',232),
  ('instruction -> assignment NEXTINST','instruction',2,'p_program_finite','program.py',233),
  ('instruction -> show NEXTINST','instruction',2,'p_program_finite','program.py',234),
  ('instruction -> input NEXTINST','instruction',2,'p_program_finite','program.py',235),
  ('instruction -> WLEFTBRACKET instruction WRIGHTBRACKET','instruction',3,'p_instruction_bracketed','program.py',243),
  ('instruction -> WLEFTBRACKET code WRIGHTBRACKET','instruction',3,'p_instruction_bracketed','program.py',244),
  ('expression -> INT','expression',1,'p_expression_number','program.py',252),
  ('expression -> NAME','expression',1,'p_expression_var','program.py',260),
  ('expression -> LEFTBRACKET expression RIGHTBRACKET','expression',3,'p_expression_parenthesis','program.py',268),
  ('expression -> MINUS expression','expression',2,'p_expression_minus','program.py',276),
  ('expression -> expression PLUS expression','expression',3,'p_expression_arithmetic','program.py',284),
  ('expression -> expression MINUS expression','expression',3,'p_expression_arithmetic','program.py',285),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_arithmetic','program.py',286),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_arithmetic','program.py',287),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_arithmetic','program.py',288),
  ('expression -> expression LOWER expression','expression',3,'p_expression_arithmetic','program.py',289),
  ('expression -> expression GREATER expression','expression',3,'p_expression_arithmetic','program.py',290),
  ('expression -> expression NOTEQ expression','expression',3,'p_expression_arithmetic','program.py',291),
  ('expression -> expression LOWEREQ expression','expression',3,'p_expression_arithmetic','program.py',292),
  ('expression -> expression GREATEREQ expression','expression',3,'p_expression_arithmetic','program.py',293),
  ('code -> instruction instruction','code',2,'p_instruction_infinite','program.py',301),
  ('code -> code instruction','code',2,'p_instruction_infinite','program.py',302),
  ('code -> instruction code','code',2,'p_instruction_infinite','program.py',303),
  ('code -> code code','code',2,'p_instruction_infinite','program.py',304),
  ('program -> code','program',1,'p_final','program.py',312),
  ('program -> instruction','program',1,'p_final','program.py',313),
]
